
import sys
import os
from pathlib import Path

def test_categorical_encoding_logic():
    """Test de la logique d'encodage cat√©goriel sans d√©pendances."""
    print("=" * 60)
    print("TEST 1: Categorical Encoding Logic")
    print("=" * 60)
    
    # Test d'encodage ordinal manuel
    status_order = ['Ouvert', 'Sous inspection f√©d√©rale', 'Ferm√© changement d\'exploitant', 'Ferm√©']
    status_data = ['Ouvert', 'Ferm√©', 'Ouvert', 'Sous inspection f√©d√©rale']
    
    # Cr√©er le mapping ordinal
    ordinal_mapping = {value: idx for idx, value in enumerate(status_order)}
    print(f"üìã Ordinal mapping: {ordinal_mapping}")
    
    # Encoder les donn√©es
    encoded_status = [ordinal_mapping.get(status, -1) for status in status_data]
    print(f"üìä Original: {status_data}")
    print(f"üìä Encoded: {encoded_status}")
    
    # V√©rifier l'encodage
    if all(val >= 0 for val in encoded_status):
        print("‚úÖ Ordinal encoding successful")
        return True
    else:
        print("‚ùå Ordinal encoding failed")
        return False

def test_one_hot_encoding_logic():
    """Test de la logique one-hot encoding."""
    print("\n" + "=" * 60)
    print("TEST 2: One-Hot Encoding Logic")
    print("=" * 60)
    
    # Donn√©es de test
    categories = ['Restaurant', 'Caf√©', 'Restaurant', 'Bar', 'Restaurant']
    unique_categories = list(set(categories))
    
    print(f"üìã Categories: {categories}")
    print(f"üìã Unique: {unique_categories}")
    
    # Cr√©er l'encodage one-hot manuel
    one_hot_encoded = {}
    for category in unique_categories:
        column_name = f"cat_{category}"
        one_hot_encoded[column_name] = [1 if cat == category else 0 for cat in categories]
    
    print(f"üìä One-hot encoded:")
    for col, values in one_hot_encoded.items():
        print(f"  {col}: {values}")
    
    # V√©rifier que chaque ligne a exactement un 1
    for i in range(len(categories)):
        row_sum = sum(one_hot_encoded[col][i] for col in one_hot_encoded.keys())
        if row_sum != 1:
            print(f"‚ùå Row {i} has sum {row_sum} (should be 1)")
            return False
    
    print("‚úÖ One-hot encoding successful")
    return True

def test_frequency_encoding_logic():
    """Test de la logique d'encodage par fr√©quence."""
    print("\n" + "=" * 60)
    print("TEST 3: Frequency Encoding Logic")
    print("=" * 60)
    
    # Donn√©es avec diff√©rentes fr√©quences
    cities = ['Montr√©al', 'Montr√©al', 'Qu√©bec', 'Montr√©al', 'Laval', 'Qu√©bec', 'Montr√©al']
    
    # Calculer les fr√©quences
    frequency_map = {}
    for city in cities:
        frequency_map[city] = frequency_map.get(city, 0) + 1
    
    print(f"üìã Cities: {cities}")
    print(f"üìä Frequency map: {frequency_map}")
    
    # Encoder par fr√©quence
    encoded_cities = [frequency_map[city] for city in cities]
    print(f"üìä Frequency encoded: {encoded_cities}")
    
    # V√©rifier que les villes les plus fr√©quentes ont les valeurs les plus √©lev√©es
    max_freq = max(frequency_map.values())
    most_frequent_city = [city for city, freq in frequency_map.items() if freq == max_freq][0]
    
    if frequency_map[most_frequent_city] == max_freq:
        print("‚úÖ Frequency encoding successful")
        return True
    else:
        print("‚ùå Frequency encoding failed")
        return False

def test_rare_category_grouping():
    """Test du regroupement des cat√©gories rares."""
    print("\n" + "=" * 60)
    print("TEST 4: Rare Category Grouping")
    print("=" * 60)
    
    # Donn√©es avec cat√©gories rares
    owners = ['Jean Dupont', 'Marie Tremblay', 'Jean Dupont', 'Pierre Leblanc', 
              'Jean Dupont', 'Sophie Martin', 'Marie Tremblay', 'Jean Dupont']
    
    min_frequency = 3
    
    # Calculer les fr√©quences
    owner_counts = {}
    for owner in owners:
        owner_counts[owner] = owner_counts.get(owner, 0) + 1
    
    print(f"üìã Owners: {owners}")
    print(f"üìä Owner counts: {owner_counts}")
    
    # Identifier les cat√©gories rares
    rare_owners = [owner for owner, count in owner_counts.items() if count < min_frequency]
    common_owners = [owner for owner, count in owner_counts.items() if count >= min_frequency]
    
    print(f"üîç Rare owners (freq < {min_frequency}): {rare_owners}")
    print(f"‚úÖ Common owners (freq >= {min_frequency}): {common_owners}")
    
    # Regrouper les cat√©gories rares
    grouped_owners = ['RARE_CATEGORY' if owner in rare_owners else owner for owner in owners]
    print(f"üìä Grouped: {grouped_owners}")
    
    # V√©rifier le regroupement
    rare_count_after = grouped_owners.count('RARE_CATEGORY')
    expected_rare_count = sum(owner_counts[owner] for owner in rare_owners)
    
    if rare_count_after == expected_rare_count:
        print("‚úÖ Rare category grouping successful")
        return True
    else:
        print("‚ùå Rare category grouping failed")
        return False

def test_text_feature_extraction():
    """Test simple d'extraction de features textuelles."""
    print("\n" + "=" * 60)
    print("TEST 5: Text Feature Extraction")
    print("=" * 60)
    
    # Descriptions d'infractions
    descriptions = [
        'Temp√©rature inad√©quate r√©frig√©ration',
        'Contamination crois√©e aliments',
        '√âquipement d√©faillant temp√©rature',
        'Non-respect normes hygi√®ne'
    ]
    
    print(f"üìã Descriptions: {descriptions}")
    
    # Extraction simple de mots-cl√©s
    all_words = []
    for desc in descriptions:
        words = desc.lower().split()
        all_words.extend(words)
    
    # Compter les mots
    word_counts = {}
    for word in all_words:
        word_counts[word] = word_counts.get(word, 0) + 1
    
    print(f"üìä Word counts: {word_counts}")
    
    # Cr√©er des features binaires pour les mots fr√©quents
    frequent_words = [word for word, count in word_counts.items() if count >= 2]
    print(f"üîç Frequent words: {frequent_words}")
    
    # Encoder les descriptions
    text_features = {}
    for word in frequent_words:
        text_features[f"has_{word}"] = [1 if word in desc.lower() else 0 for desc in descriptions]
    
    print(f"üìä Text features:")
    for feature, values in text_features.items():
        print(f"  {feature}: {values}")
    
    if len(text_features) > 0:
        print("‚úÖ Text feature extraction successful")
        return True
    else:
        print("‚ùå Text feature extraction failed")
        return False

def test_mapaq_specific_encoding():
    """Test de l'encodage sp√©cifique MAPAQ."""
    print("\n" + "=" * 60)
    print("TEST 6: MAPAQ-Specific Encoding")
    print("=" * 60)
    
    # Donn√©es MAPAQ typiques
    mapaq_data = {
        'statut': ['Ouvert', 'Ferm√©', 'Sous inspection f√©d√©rale', 'Ouvert'],
        'categorie': ['Restaurant', 'Caf√©', 'Restaurant', 'Bar'],
        'ville': ['Montr√©al', 'Montr√©al', 'Qu√©bec', 'Montr√©al'],
        'description': ['Temp√©rature inad√©quate', 'Contamination crois√©e', '√âquipement d√©faillant', 'Normes non respect√©es']
    }
    
    print("üìä MAPAQ Data Sample:")
    for col, values in mapaq_data.items():
        print(f"  {col}: {values}")
    
    # Test encodage ordinal pour statut
    status_order = ['Ouvert', 'Sous inspection f√©d√©rale', 'Ferm√© changement d\'exploitant', 'Ferm√©']
    status_mapping = {status: idx for idx, status in enumerate(status_order)}
    encoded_status = [status_mapping.get(s, -1) for s in mapaq_data['statut']]
    
    print(f"\nüî¢ Status encoding: {mapaq_data['statut']} ‚Üí {encoded_status}")
    
    # Test one-hot pour cat√©gories
    unique_categories = list(set(mapaq_data['categorie']))
    category_encoding = {}
    for cat in unique_categories:
        category_encoding[f"cat_{cat}"] = [1 if c == cat else 0 for c in mapaq_data['categorie']]
    
    print(f"üè∑Ô∏è  Category encoding:")
    for col, values in category_encoding.items():
        print(f"  {col}: {values}")
    
    # Test fr√©quence pour villes
    city_counts = {}
    for city in mapaq_data['ville']:
        city_counts[city] = city_counts.get(city, 0) + 1
    encoded_cities = [city_counts[city] for city in mapaq_data['ville']]
    
    print(f"üåç City frequency encoding: {mapaq_data['ville']} ‚Üí {encoded_cities}")
    
    # V√©rifications
    checks = [
        all(val >= 0 for val in encoded_status),  # Status encoding valid
        len(category_encoding) > 0,  # Categories encoded
        max(encoded_cities) >= min(encoded_cities)  # City frequencies valid
    ]
    
    if all(checks):
        print("‚úÖ MAPAQ-specific encoding successful")
        return True
    else:
        print("‚ùå MAPAQ-specific encoding failed")
        return False

def generate_encoding_summary():
    """G√©n√©rer un r√©sum√© des techniques d'encodage."""
    print("\n" + "=" * 60)
    print("CATEGORICAL ENCODING SUMMARY")
    print("=" * 60)
    
    techniques = {
        'Ordinal Encoding': {
            'use_case': 'Variables avec ordre naturel (statut, s√©v√©rit√©)',
            'example': 'Ouvert(0) < Sous inspection(1) < Ferm√©(2)',
            'advantages': 'Pr√©serve l\'ordre, compact',
            'disadvantages': 'Assume une relation ordinale'
        },
        'One-Hot Encoding': {
            'use_case': 'Variables nominales avec peu de cat√©gories',
            'example': 'Restaurant ‚Üí [1,0,0], Caf√© ‚Üí [0,1,0], Bar ‚Üí [0,0,1]',
            'advantages': 'Pas d\'assumption ordinale, interpr√©table',
            'disadvantages': 'Augmente la dimensionnalit√©'
        },
        'Frequency Encoding': {
            'use_case': 'Variables haute cardinalit√©',
            'example': 'Montr√©al(100) > Qu√©bec(50) > Laval(10)',
            'advantages': 'Compact, capture la popularit√©',
            'disadvantages': 'Perd l\'information cat√©gorielle'
        },
        'Rare Category Grouping': {
            'use_case': 'R√©duire la cardinalit√©',
            'example': 'Propri√©taires rares ‚Üí RARE_CATEGORY',
            'advantages': 'R√©duit le bruit, g√©n√©ralise mieux',
            'disadvantages': 'Perte d\'information sp√©cifique'
        },
        'Text Feature Extraction': {
            'use_case': 'Descriptions textuelles',
            'example': 'TF-IDF, mots-cl√©s binaires',
            'advantages': 'Capture le contenu s√©mantique',
            'disadvantages': 'Haute dimensionnalit√©'
        }
    }
    
    for technique, details in techniques.items():
        print(f"\nüîß {technique}:")
        for key, value in details.items():
            print(f"  {key.replace('_', ' ').title()}: {value}")
    
    print(f"\nüí° Recommendations for MAPAQ:")
    print(f"  ‚Ä¢ Use ordinal encoding for 'statut' (natural order)")
    print(f"  ‚Ä¢ Use one-hot encoding for 'categorie' (few categories)")
    print(f"  ‚Ä¢ Use frequency encoding for 'ville' (many cities)")
    print(f"  ‚Ä¢ Group rare categories for 'proprietaire' (high cardinality)")
    print(f"  ‚Ä¢ Extract text features from 'description' (semantic content)")

def main():
    """Ex√©cuter tous les tests d'encodage cat√©goriel."""
    print("üöÄ Categorical Encoding Tests - Heures 17-20")
    print("=" * 70)
    print("Validation des techniques d'encodage cat√©goriel")
    print("=" * 70)
    
    results = []
    
    # Tests √† ex√©cuter
    tests = [
        ("Ordinal Encoding Logic", test_categorical_encoding_logic),
        ("One-Hot Encoding Logic", test_one_hot_encoding_logic),
        ("Frequency Encoding Logic", test_frequency_encoding_logic),
        ("Rare Category Grouping", test_rare_category_grouping),
        ("Text Feature Extraction", test_text_feature_extraction),
        ("MAPAQ-Specific Encoding", test_mapaq_specific_encoding)
    ]
    
    for test_name, test_func in tests:
        print(f"\nüß™ Running: {test_name}")
        try:
            result = test_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Test failed with exception: {str(e)}")
            results.append(False)
    
    # G√©n√©rer le r√©sum√©
    generate_encoding_summary()
    
    # R√©sum√© des r√©sultats
    print("\n" + "=" * 70)
    print("üìä CATEGORICAL ENCODING TEST RESULTS")
    print("=" * 70)
    
    passed = sum(results)
    total = len(results)
    
    for i, (test_name, _) in enumerate(tests):
        status = "‚úÖ PASS" if results[i] else "‚ùå FAIL"
        print(f"  {test_name}: {status}")
    
    print(f"\nüéØ Overall: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
    
    if passed >= 5:
        print("üéâ CATEGORICAL ENCODING VALIDATION SUCCESSFUL!")
        print("‚úÖ Ready for Heures 21-24: Tests unitaires ingestion/nettoyage")
    else:
        print("‚ö†Ô∏è  Some encoding tests failed. Review the implementation.")
    
    return passed >= 5

if __name__ == "__main__":
    main()
